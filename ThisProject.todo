ThisProject.todo
Файл служебного описания проекта и ToDo
========================================

ОБЩИЕ ПРИНЦИПЫ данного WEB проекта:
------------------------------------
  - Локальный статический минисайт с просмотром видео, размещенного в облачном хранилище.
  - Используется Bootstrap 4, Gulp.
  - Локально - только index.html с общим оглавлением, домашним заданием и файлами с учебным кодом.
  - Видеофайлы (из торрента) после перекомпиляции расположены на MEGA, доступ к просмотру - по ссылке из index.html
  - Параметры перекомпиляции: mp4-H264-8000kbps-960x720_MP3-64kbps
  ... и т.д.
  ---- ✄ -----------------------

ТАЙМИНГ проекта:
----------------
 ☐ Создан: @created(03-11-2018 01:33)
 ☐ Deadline: 
   ✔ 1-й срок @due(05-11-2018 20:00) @done (16-11-2018 16:53)
   ✔ 2-й срок @due(20-11-2018 20:00) @done (21-11-2018 00:47)
 ☐ Общая продолжительность:  

  Тайминг по дням:
    ... и т.д. (в обратном порядке)
    ✔ @started(19-11-2018 17:00) @done (20-11-2018 06:00) @lasted(13:00)
    ✔ @started(17-11-2018 16:00) @done (18-11-2018 01:51) @lasted(9:51)
    ✔ @started(16-11-2018 21:33) @done (17-11-2018 04:08) @lasted(6:35)
    ---- ✄ -----------------------

ГЛОБАЛЬНЫЕ ЦЕЛИ и ЗАДАЧИ проекта:
----------------------------------
 ☐ Следующий этап (наполнение контентом) - по мере необходимости (по мере изучения PHP) @todo
 ✔ Первый этап - начало проекта, получение первого стабильного результата по переносу видеофайлов на MEGA @done (21-11-2018 01:09)
 ... и т.д.
 ---- ✄ -----------------------

ОСНОВНЫЕ ВЕХИ проекта:
-----------------------
 ... и т.д. (в обратном порядке)
 ☐ Проект пока отложен (до возникновения необходимости) @low
 ✔ Промежуточный итог первого этапа @done (21-11-2018 00:53)
    Начато написание оболочки (файл index.html). 
    Часть mp4 файлов переконвертирована и выложена на MEGA, досуп к ним по ссылке из index.html
    Следующий этап - наполнение контентом (из torrent -> на MEGA после конвертации).

 ---- ✄ -----------------------

ТЕКУЩИЕ ЗАДАЧИ:
(выполненные задачи уходят вниз, в Архив)
-------------------------------------------
 ... и т.д. (в обратном порядке)
 ☐ 
 ✔ Настроить обновление страницы через Gulp (browserSync) @created(16-11-2018 21:33) @started(16-11-2018 21:33) @due(16.11.2018 22:00) @toggle(17-11-2018 04:08) @toggle(17-11-2018 16:00) @done (18-11-2018 01:51) @lasted(16:26)
 Расчетное время - 22:00-21:33=27 минут
 Фактически затраченное время - (21:33->04:08)+(01:51->16:00)=6:37+9:51=16:28


 ---- ✄ -----------------------

МЕЛОЧИ:
-------
 ☐ 
  ... и т.д
  ---- ✄ -----------------------

ПРИМЕЧАНИЯ и ЗАМЕТКИ:
----------------------
 ☐ Использование Gulp @gulp
   [Статья по Gulp](https://webdesign-master.ru/blog/tools/2016-03-09-gulp-beginners.html)
   ☐ Проверить установлен ли в системе Node.Js и Gupl (глобально):
      $ node --version
        v9.7.1
      $ gulp --version
        3.9.1
   ☐ Инициализировать проект (локально в каталоге проекта пересоздается файл package.json):
      $ npm init
   ☐ Установить в проект Gulp (локально в каталоге проекта пересоздается каталог node_modules)
      $ npm i gulp --save-dev
   ☐ Файл gulpfile.js @gulpfile.js

     ☐ Первичные настройки файла gulpfile.js 
       var gulp = require('gulp'); //Подключение Gulp из папки node_modules к проекту в переменную gulp

       //Пробный таск
       gulp.task('mytask', function() {
       console.log('Привет, я таск!');
       });

       Проверить работу пробного таска в командной строке
       $ gulp mytask

     ☐ Обработка изображений
       Перенос изображений из каталога ресурсов в продакшин с их оптимизацией

       - Установить и подключить пакеты для оптимизации изображений
         $ npm i gulp-imagemin imagemin-pngquant --save-dev

       - В переменную var подключить пакеты для обработки изображений
         imagemin    = require('gulp-imagemin'), // Подключаем библиотеку для работы с изображениями
         pngquant    = require('imagemin-pngquant'); // Подключаем библиотеку для работы с png

       - Создать таск img для сжатия изображений (для продакшина)
       gulp.task('img', function() {
           return gulp.src('app/img/**/*') //Берем все изображения из app
               .pipe(imagemin({ //Сжимаем их с наилучшими настройками
                     interlaced: true,
                     progressive: true,
                     svgoPlugins: [{removeViewBox: false}],
                     use: [pngquant()]
               }))
               .pipe(gulp.dest('dist/img')); //Выгружаем на продакшин
       });



gulp.task('build', ['clean', 'img', 'sass', 'scripts'], function() {

    var buildCss = gulp.src([ // Переносим библиотеки в продакшен
        'app/css/main.css',
        'app/css/libs.min.css'
        ])
    .pipe(gulp.dest('dist/css'))

    var buildFonts = gulp.src('app/fonts/**/*') // Переносим шрифты в продакшен
    .pipe(gulp.dest('dist/fonts'))

    var buildJs = gulp.src('app/js/**/*') // Переносим скрипты в продакшен
    .pipe(gulp.dest('dist/js'))

    var buildHtml = gulp.src('app/*.html') // Переносим HTML в продакшен
    .pipe(gulp.dest('dist'));

});



        и вызовем его после очистки:



  ... и т.д
  ---- ✄ -----------------------

=============================================================================================================================================================================================================================================

АРХИВ:
-------
Для расчетов затраченного времени https://planetcalc.ru/865/ и https://planetcalc.ru/5121/
  ... и т.д
  ---- ✄ -----------------------

